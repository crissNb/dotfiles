# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set drawbox

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f
cmd open-with-gui &$@ $fx ## opens with a gui application outside lf client
cmd open-with-cli $$@ $fx ## opens with a cli application inside lf client
map O push :open-with-gui<space> ## input application
map o push :open-with-cli<space> ## input application

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

cmd touch %{{
    IFS=" "
    if [ -z "$*" ]; then echo "name required"; exit; fi
    if [ -f "$*" ]; then echo "file exists"; exit; fi
    if [ -d "$*" ]; then echo "there is a directory with the same name"; exit; fi
    touch "$*"
    lf -remote "send $id select \"$*\""
}}

cmd create %{{
    IFS=" "
    if [ -z "$*" ]; then echo "name required"; exit; fi
    if [[ "$*" == */ ]] ; then
        mkdir -p -- "$*"
        lf -remote "send $id select \"$*\""
        exit 0
    fi
    base=$(dirname -- "$*")
    [ "$base" != . ] && mkdir -p -- "$base"
    touch "$*"
    lf -remote "send $id select \"$*\""
}}

cmd fzf_jump ${{
    res="$(fd . -H -I -d 6 -E .git -E node_modules | fzf +m | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search_all ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --ansi --bind "change:reload:$RG_PREFIX {q} || true" \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd fzf_grep ${{
    res="$( \
        rg --column --line-number --no-heading --color=always --smart-case -e "$*"| \
        fzf --ansi | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd chmod ${{
        [ $# -ne 1 ] && exit
        eval "chmod u$1 '$f'"
        lf -remote "send $id reload"
}}

cmd copy_file_name ${{
    printf "$(basename "$f")" | pbcopy
}}

cmd paste_file_name ${{
    mv "$f" "$(pbpaste)"
}}

# set previewer ~/.config/lf/batpreviewer.sh
map . set hidden!
map T trash
map r rename
map +x chmod +x
map +w chmod +w
map +r chmod +r
map -x chmod -x
map -w chmod -w
map -r chmod -r!/bin/sh

map ?
map ?? maps
map F fzf_jump
map f
map fa fzf_search_all
map fg push :fzf_grep<space>
map f<space> filter
map fc setfilter
map ff filter

map gh cd ~
map gj cd ~/Downloads
map gd cd ~/Documents
map gk cd ~/KIT/Modules
map gs cd ~/semikoder/
map ga cd /Applications
map gv cd /Volumes
map gc cd ~/.config
map gp cd ~/Pictures

map Y copy_file_name
map P paste_file_name

map xz zip
map xt tar
map xx extract

map a push :create<space>

set info size
set previewer ~/.config/lf/lf_kitty_preview
set cleaner ~/.config/lf/lf_kitty_clean
